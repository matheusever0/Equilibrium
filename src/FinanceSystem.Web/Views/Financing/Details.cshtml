@model FinancingDetailDto
@using FinanceSystem.Web.Helpers
@using FinanceSystem.Web.Models.Financing
@{
    ViewData["Title"] = "Detalhes do Financiamento";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-3">
        <h1 class="h3 mb-0 text-gray-800">Detalhes do Financiamento</h1>
        <div>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-1"></i> Voltar
            </a>
            @if (Model.Status == "Active")
            {
                @if (await PermissionHelper.HasPermissionAsync(Context, "financings.forecast"))
                {
                    <a asp-action="Forecast" asp-route-id="@Model.Id" class="btn btn-primary">
                        <i class="fas fa-chart-line me-1"></i> Previsão
                    </a>
                }
                @if (await PermissionHelper.HasPermissionAsync(Context, "financings.apply-correction"))
                {
                    <a asp-action="ApplyCorrection" asp-route-id="@Model.Id" class="btn btn-warning">
                        <i class="fas fa-sync-alt me-1"></i> Aplicar Correção
                    </a>
                }
            }
        </div>
    </div>

    <div class="row">
        <!-- Informações do Financiamento -->
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">Informações do Financiamento</h6>
                    <span class="badge @GetStatusBadgeClass(Model.Status)">@Model.StatusDescription</span>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Descrição</h5>
                                <p>@Model.Description</p>
                            </div>
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Valor Total</h5>
                                <p class="fw-bold">@Model.TotalAmount.ToString("C2")</p>
                            </div>
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Taxa de Juros</h5>
                                <p>@Model.InterestRate.ToString("F2")% ao mês</p>
                            </div>
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Prazo</h5>
                                <p>@Model.TermMonths meses</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Tipo</h5>
                                <p>@Model.TypeDescription</p>
                            </div>
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Índice de Correção</h5>
                                <p>@Model.CorrectionIndexDescription</p>
                            </div>
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Data de Início</h5>
                                <p>@Model.StartDate.ToString("dd/MM/yyyy")</p>
                            </div>
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Data de Término</h5>
                                <p>@(Model.EndDate?.ToString("dd/MM/yyyy") ?? "Em andamento")</p>
                            </div>
                        </div>
                    </div>

                    <hr>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Dívida Restante</h5>
                                <p class="text-danger fw-bold">@Model.RemainingDebt.ToString("C2")</p>
                            </div>
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Total Pago</h5>
                                <p class="text-success fw-bold">@Model.TotalPaid.ToString("C2")</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Parcelas Pagas</h5>
                                <p>@Model.InstallmentsPaid de @(Model.InstallmentsPaid + Model.InstallmentsRemaining)</p>
                            </div>
                            <div class="mb-3">
                                <h5 class="small font-weight-bold text-muted">Progresso</h5>
                                <div class="progress">
                                    <div class="progress-bar @GetProgressBarClass(Model.ProgressPercentage)"
                                         role="progressbar"
                                         style="width: @(Model.ProgressPercentage * 100)%"
                                         aria-valuenow="@(Model.ProgressPercentage * 100)"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                        @((Model.ProgressPercentage * 100).ToString("F0"))%
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Notes))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="card bg-light mb-3">
                                    <div class="card-header">Observações</div>
                                    <div class="card-body">
                                        <p class="card-text">@Model.Notes</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Ações -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Ações</h6>
                </div>
                <div class="card-body">
                    @if (Model.Status == "Active")
                    {
                        @if (await PermissionHelper.HasPermissionAsync(Context, "financings.edit"))
                        {
                            <form asp-action="Complete" method="post" class="mb-3">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@Model.Id">
                                <button type="submit" class="btn btn-success w-100" onclick="return confirm('Tem certeza que deseja marcar este financiamento como concluído?')">
                                    <i class="fas fa-check-circle me-1"></i> Marcar como Concluído
                                </button>
                            </form>

                            <form asp-action="Cancel" method="post" class="mb-3">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@Model.Id">
                                <button type="submit" class="btn btn-danger w-100" onclick="return confirm('Tem certeza que deseja cancelar este financiamento? Esta ação não pode ser desfeita.')">
                                    <i class="fas fa-ban me-1"></i> Cancelar Financiamento
                                </button>
                            </form>
                        }

                        @if (await PermissionHelper.HasPermissionAsync(Context, "payments.create"))
                        {
                            <a asp-controller="Payments" asp-action="CreateWithFinancing" class="btn btn-primary w-100 mb-3">
                                <i class="fas fa-money-bill-wave me-1"></i> Novo Pagamento
                            </a>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i> Este financiamento está @Model.StatusDescription.ToLower() e não pode ser modificado.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Parcelas -->
    @if (Model.Installments != null && Model.Installments.Any())
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Parcelas</h6>
                <span class="badge bg-primary">@Model.Installments.Count() parcelas</span>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th>Parcela</th>
                                <th class="text-center">Valor Total</th>
                                <th class="text-center">Juros</th>
                                <th class="text-center">Amortização</th>
                                <th class="text-center">Vencimento</th>
                                <th class="text-center">Pagamento</th>
                                <th class="text-center">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var installment in Model.Installments.OrderBy(i => i.InstallmentNumber))
                            {
                                <tr>
                                    <td>@installment.InstallmentNumber</td>
                                    <td class="text-end">@installment.TotalAmount.ToString("C2")</td>
                                    <td class="text-end">@installment.InterestAmount.ToString("C2")</td>
                                    <td class="text-end">@installment.AmortizationAmount.ToString("C2")</td>
                                    <td class="text-center">@installment.DueDate.ToString("dd/MM/yyyy")</td>
                                    <td class="text-center">@(installment.PaymentDate?.ToString("dd/MM/yyyy") ?? "-")</td>
                                    <td class="text-center">
                                        <span class="badge @GetInstallmentStatusBadgeClass(installment.Status)">@installment.StatusDescription</span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- Pagamentos -->
    @if (Model.Payments != null && Model.Payments.Any())
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Pagamentos</h6>
                <span class="badge bg-primary">@Model.Payments.Count() pagamentos</span>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th>Descrição</th>
                                <th class="text-center">Data</th>
                                <th class="text-center">Valor</th>
                                <th>Método</th>
                                <th class="text-center">Status</th>
                                <th class="text-center">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in Model.Payments.OrderByDescending(p => p.PaymentDate ?? p.DueDate))
                            {
                                <tr>
                                    <td>@payment.Description</td>
                                    <td class="text-center">@(payment.PaymentDate?.ToString("dd/MM/yyyy") ?? payment.DueDate.ToString("dd/MM/yyyy"))</td>
                                    <td class="text-end">@payment.Amount.ToString("C2")</td>
                                    <td>@payment.PaymentMethodName</td>
                                    <td class="text-center">
                                        <span class="badge @GetPaymentStatusBadgeClass(payment.Status)">@payment.StatusDescription</span>
                                    </td>
                                    <td class="text-center">
                                        <a asp-controller="Payments" asp-action="Details" asp-route-id="@payment.Id" class="btn btn-sm btn-info">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- Correções -->
    @if (Model.Corrections != null && Model.Corrections.Any())
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Correções Monetárias</h6>
                <span class="badge bg-primary">@Model.Corrections.Count() correções</span>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th class="text-center">Data</th>
                                <th class="text-center">Índice</th>
                                <th class="text-center">Valor Anterior</th>
                                <th class="text-center">Novo Valor</th>
                                <th class="text-center">Diferença</th>
                                <th class="text-center">Variação</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var correction in Model.Corrections.OrderByDescending(c => c.CorrectionDate))
                            {
                                <tr>
                                    <td class="text-center">@correction.CorrectionDate.ToString("dd/MM/yyyy")</td>
                                    <td class="text-center">@correction.IndexValue.ToString("F4")</td>
                                    <td class="text-end">@correction.PreviousDebt.ToString("C2")</td>
                                    <td class="text-end">@correction.NewDebt.ToString("C2")</td>
                                    <td class="text-end">@correction.DifferenceAmount.ToString("C2")</td>
                                    <td class="text-center">@(correction.DifferencePercentage.ToString("F2"))%</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success",
            "Completed" => "bg-info",
            "Cancelled" => "bg-secondary",
            _ => "bg-primary"
        };
    }

    string GetProgressBarClass(decimal percentage)
    {
        if (percentage >= 0.9m) return "bg-success";
        if (percentage >= 0.6m) return "bg-info";
        if (percentage >= 0.3m) return "bg-warning";
        return "bg-danger";
    }

    string GetInstallmentStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Paid" => "bg-success",
            "PartiallyPaid" => "bg-info",
            "Overdue" => "bg-danger",
            "Adjusted" => "bg-secondary",
            _ => "bg-primary"
        };
    }

    string GetPaymentStatusBadgeClass(int status)
    {
        return status switch
        {
            1 => "bg-warning", // Pendente
            2 => "bg-success", // Pago
            3 => "bg-danger",  // Vencido
            4 => "bg-secondary", // Cancelado
            _ => "bg-primary",
        };
    }
}