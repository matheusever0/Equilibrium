@model IncomeModel
@using Equilibrium.Web.Helpers
@using Equilibrium.Web.Models.Income
@{
    ViewData["Title"] = "Detalhes da Receita";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-3">
        <div>
            <partial name="_Partials/Commons/_BackButton" model='(Action: "Index", Controller: "Incomes", Text: "Voltar")' />
        </div>
        <div>
            @if (Model.Status != 3 && await PermissionHelper.HasPermissionAsync(Context, "incomes.edit"))
            {
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                    <i class="fas fa-edit me-1"></i> Editar
                </a>
            }
            @if (Model.Status == 1 && await PermissionHelper.HasPermissionAsync(Context, "incomes.receive"))
            {
                <a href="#" data-bs-toggle="modal" data-bs-target="#receiveIncomeModal" class="btn btn-success">
                    <i class="fas fa-check-circle me-1"></i> Marcar como Recebida
                </a>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(
                    Title: "Informações da Receita",
                    BadgeText: Model.StatusDescription,
                    BadgeClass: Model.StatusBadgeClass,
                    Icon: "fa-money-bill-alt",
                    CollapseTarget: "")' />
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Descrição", Value: Model.Description, SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Valor", Value: $"<span class=\"fw-bold text-success\">{Model.GetFormattedAmount()}</span>", SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Tipo de Receita", Value: Model.IncomeTypeName, SecondaryText: "", ValueClass: "")' />
                        </div>
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Data de Vencimento", Value: Model.GetFormattedDueDate(), SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Data de Recebimento", Value: Model.GetFormattedReceivedDate(), SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Recorrente", Value: Model.IsRecurring ? "Sim" : "Não", SecondaryText: "", ValueClass: "")' />
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Notes))
                    {
                        <div class="card bg-light mt-3">
                            <div class="card-header">Observações</div>
                            <div class="card-body">
                                <p class="card-text">@Model.Notes</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(Title: "Ações", BadgeText: "", BadgeClass: "", Icon: "fa-tools", CollapseTarget: "")' />
                <div class="card-body">
                    @if (Model.Status == 1)
                    {
                        <a href="#" data-bs-toggle="modal" data-bs-target="#receiveIncomeModal" class="btn btn-success w-100 mb-3">
                            <i class="fas fa-check-circle me-1"></i> Marcar como Recebida
                        </a>

                        <form asp-action="Cancel" method="post" class="mb-3">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@Model.Id" />
                            <button type="submit" class="btn btn-danger w-100" onclick="return confirm('Tem certeza que deseja cancelar esta receita?')">
                                <i class="fas fa-times-circle me-1"></i> Cancelar Receita
                            </button>
                        </form>
                    }
                    else if (Model.Status == 2)
                    {
                        <div class="alert alert-success">
                            <i class="fas fa-check-circle me-2"></i> Esta receita foi recebida em @Model.ReceivedDate?.ToString("dd/MM/yyyy")
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-secondary">
                            <i class="fas fa-ban me-2"></i> Esta receita foi cancelada.
                        </div>
                    }

                    @if (Model.Status != 3 && await PermissionHelper.HasPermissionAsync(Context, "incomes.edit"))
                    {
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary w-100 mb-3">
                            <i class="fas fa-edit me-1"></i> Editar Receita
                        </a>
                    }

                    @if (Model.Status != 3 && await PermissionHelper.HasPermissionAsync(Context, "incomes.delete"))
                    {
                        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-outline-danger w-100">
                            <i class="fas fa-trash me-1"></i> Excluir Receita
                        </a>
                    }
                </div>
            </div>

            @if (Model.Installments != null && Model.Installments.Any())
            {
                <div class="card shadow mb-4">
                    <partial name="_Partials/Commons/_CardHeader" model='(
                        Title: "Parcelas",
                        BadgeText: Model.Installments.Count() + " parcelas",
                        BadgeClass: "bg-info",
                        Icon: "fa-list-ol",
                        CollapseTarget: "")' />
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered mb-0">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Parcela</th>
                                        <th class="text-center">Valor</th>
                                        <th class="text-center">Vencimento</th>
                                        <th class="text-center">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var installment in Model.Installments.OrderBy(i => i.InstallmentNumber))
                                    {
                                        <tr>
                                            <td>@installment.InstallmentNumber</td>
                                            <td class="text-end">@installment.GetFormattedAmount()</td>
                                            <td class="text-center">@installment.GetFormattedDueDate()</td>
                                            <td class="text-center">
                                                <partial name="_Partials/Commons/_StatusBadge" model='(BadgeClass: installment.StatusBadgeClass, Description: installment.StatusDescription)' />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (Model.Status == 1)
{
    <div class="modal fade" id="receiveIncomeModal" tabindex="-1" aria-labelledby="receiveIncomeModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form asp-action="Receive" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.Id" />
                    <div class="modal-header">
                        <h5 class="modal-title" id="receiveIncomeModalLabel">Receber Receita</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="receivedDate" class="form-label">Data de Recebimento</label>
                            <input type="date" class="form-control" id="receivedDate" name="receivedDate" value="@DateTime.Today.ToString("yyyy-MM-dd")" required />
                        </div>
                        <p>Confirme o recebimento da receita <strong>@Model.Description</strong> no valor de <strong>@Model.GetFormattedAmount()</strong>.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-check-circle me-1"></i> Confirmar Recebimento
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}