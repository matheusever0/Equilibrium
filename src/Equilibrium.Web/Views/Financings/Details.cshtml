@model FinancingDetailModel
@using Equilibrium.Web.Helpers
@using Equilibrium.Web.Models.Financing
@{
    ViewData["Title"] = "Detalhes do Financiamento";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-3">
        <div>
            <partial name="_Partials/Commons/_BackButton" model='(Action: "Index", Controller: "Financings", Text: "Voltar")' />
        </div>
    </div>

    <div class="row">
        <!-- Informações do Financiamento -->
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(
                    Title: "Informações do Financiamento",
                    BadgeText: Model.StatusDescription,
                    BadgeClass: GetStatusBadgeClass(Model.Status),
                    Icon: "fa-money-bill-wave",
                    CollapseTarget: "")' />
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Descrição", Value: Model.Description, SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Valor Total", Value: Model.GetFormattedTotalAmount(), SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Taxa de Juros", Value: Model.InterestRate.ToString("F2") + "% ao ano", SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Prazo", Value: Model.TermMonths + " meses", SecondaryText: "", ValueClass: "")' />
                        </div>
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Tipo", Value: Model.TypeDescription, SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Índice de Correção", Value: Model.CorrectionIndexDescription, SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Data de Início", Value: Model.StartDate.ToString("dd/MM/yyyy"), SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Data de Término", Value: Model.EndDate?.ToString("dd/MM/yyyy") ?? "Em andamento", SecondaryText: "", ValueClass: "")' />
                        </div>
                    </div>

                    <hr>

                    <div class="row">
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_MetricCard" model='(
                                Title: "Dívida Restante",
                                Value: Model.RemainingDebt.ToString("C2"),
                                Icon: "fa-money-bill-wave",
                                Color: "danger",
                                SubValue: "",
                                ShowProgress: false)' />

                            <partial name="_Partials/Commons/_MetricCard" model='(
                                Title: "Total Pago",
                                Value: Model.TotalPaid.ToString("C2"),
                                Icon: "fa-money-check",
                                Color: "success",
                                SubValue: "",
                                ShowProgress: false)' />
                        </div>
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_MetricCard" model='(
                                Title: "Progresso",
                                Value: Model.ProgressPercentage.ToString("F0") + "%",
                                Icon: "fa-tasks",
                                Color: GetProgressBarClass(Model.ProgressPercentage),
                                SubValue: Model.InstallmentsPaid + " de " + (Model.InstallmentsPaid + Model.InstallmentsRemaining) + " parcelas",
                                ShowProgress: true)' />
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Notes))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="card bg-light mb-3">
                                    <div class="card-header">Observações</div>
                                    <div class="card-body">
                                        <p class="card-text">@Model.Notes</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Ações -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(Title: "Ações", BadgeText: "", BadgeClass: "", Icon: "fa-tools", CollapseTarget: "")' />
                <div class="card-body">
                    @if (Model.Status == 1)
                    {
                        @if (await PermissionHelper.HasPermissionAsync(Context, "financings.edit"))
                        {
                            <form asp-action="Complete" method="post" class="mb-3">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@Model.Id">
                                <button type="submit" class="btn btn-success w-100" onclick="return confirm('Tem certeza que deseja marcar este financiamento como concluído?')">
                                    <i class="fas fa-check-circle me-1"></i> Marcar como Concluído
                                </button>
                            </form>

                            <form asp-action="Cancel" method="post" class="mb-3">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@Model.Id">
                                <button type="submit" class="btn btn-danger w-100" onclick="return confirm('Tem certeza que deseja cancelar este financiamento? Esta ação não pode ser desfeita.')">
                                    <i class="fas fa-ban me-1"></i> Cancelar Financiamento
                                </button>
                            </form>
                        }

                        @if (await PermissionHelper.HasPermissionAsync(Context, "payments.create"))
                        {
                            <a asp-controller="Payments" asp-action="CreateWithFinancing" class="btn btn-primary w-100 mb-3">
                                <i class="fas fa-money-bill-wave me-1"></i> Novo Pagamento
                            </a>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i> Este financiamento está @Model.StatusDescription.ToLower() e não pode ser modificado.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Parcelas -->
    @if (Model.Installments != null && Model.Installments.Any())
    {
        <div class="card shadow mb-4">
            <partial name="_Partials/Commons/_CardHeader" model='(
                Title: "Parcelas",
                BadgeText: Model.Installments.Count() + " parcelas",
                BadgeClass: "bg-primary",
                Icon: "fa-list-ol",
                CollapseTarget: "")' />
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="payments-table">
                        <thead class="bg-light">
                            <tr>
                                <th>Parcela</th>
                                <th class="text-center">Valor Total</th>
                                <th class="text-center">Valor Pago</th>
                                <th class="text-center">Diff</th>
                                <th class="text-center">Juros</th>
                                <th class="text-center">Amortização</th>
                                <th class="text-center">Valor Correção</th>
                                <th class="text-center">Vencimento</th>
                                <th class="text-center">Pagamento</th>
                                <th class="text-center">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var installment in Model.Installments.OrderBy(i => i.InstallmentNumber))
                            {
                                <tr>
                                    <td>@installment.InstallmentNumber</td>
                                    <td class="text-end">@installment.TotalAmount.ToString("C2")</td>
                                    <td class="text-end">@installment.PaidAmount.ToString("C2")</td>
                                    <td class="text-center">
                                        @if (installment.Status is 2 or 3)
                                        {
                                            <span class="@(installment.PercentageDifference < 0 ? "text-success" : "text-warning")">
                                                @installment.GetFormattedDifference()
                                            </span>
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </td>
                                    <td class="text-end">@installment.InterestAmount.ToString("C2")</td>
                                    <td class="text-end">@installment.AmortizationAmount.ToString("C2")</td>
                                    <td class="text-end">@installment.GetFormattedTotalCorrection()</td>
                                    <td class="text-center">@installment.DueDate.ToString("dd/MM/yyyy")</td>
                                    <td class="text-center">@(installment.PaymentDate?.ToString("dd/MM/yyyy") ?? "-")</td>
                                    <td class="text-center">
                                        <partial name="_Partials/Commons/_StatusBadge" model='(BadgeClass: GetInstallmentStatusBadgeClass(installment.Status), Description: installment.StatusDescription)' />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- Pagamentos -->
    @if (Model.Payments != null && Model.Payments.Any())
    {
        <div class="card shadow mb-4">
            <partial name="_Partials/Commons/_CardHeader" model='(
                Title: "Pagamentos",
                BadgeText: Model.Payments.Count() + " pagamentos",
                BadgeClass: "bg-primary",
                Icon: "fa-money-bill-wave",
                CollapseTarget: "")' />
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="incomes-table">
                        <thead class="bg-light">
                            <tr>
                                <th>Descrição</th>
                                <th class="text-center">Data</th>
                                <th class="text-center">Valor</th>
                                <th>Método</th>
                                <th class="text-center">Status</th>
                                <th class="text-center">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in Model.Payments.OrderByDescending(p => p.PaymentDate ?? p.DueDate))
                            {
                                <tr>
                                    <td>@payment.Description</td>
                                    <td class="text-center">@(payment.PaymentDate?.ToString("dd/MM/yyyy") ?? payment.DueDate.ToString("dd/MM/yyyy"))</td>
                                    <td class="text-end">@payment.Amount.ToString("C2")</td>
                                    <td>@payment.PaymentMethodName</td>
                                    <td class="text-center">
                                        <partial name="_Partials/Commons/_StatusBadge" model='(BadgeClass: GetPaymentStatusBadgeClass(payment.Status), Description: payment.StatusDescription)' />
                                    </td>
                                    <td class="text-center">
                                        <partial name="_Partials/Commons/_ActionButtons" model='(
                                            Id: payment.Id,
                                            CanView: true,
                                            CanEdit: false,
                                            CanDelete: false,
                                            ControllerName: "Payments")' />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <partial name="_Partials/Commons/_EmptyState" model='(
            Message: "Nenhum pagamento registrado para este financiamento.",
            Icon: "fa-money-bill-wave",
            ButtonText: await PermissionHelper.HasPermissionAsync(Context, "payments.create") && Model.Status == 1 ? "Registrar Pagamento" : "",
            ButtonUrl: Url.Action("CreateWithFinancing", "Payments", new { financingId = Model.Id }),
            ButtonIcon: "fa-plus",
            IsAlert: true)' />
    }
</div>

@functions {
    string GetStatusBadgeClass(int status)
    {
        return status switch
        {
            1 => "bg-success",
            2 => "bg-info",
            3 => "bg-secondary",
            _ => "bg-primary"
        };
    }

    string GetProgressBarClass(decimal percentage)
    {
        if (percentage >= 0.9m) return "success";
        if (percentage >= 0.6m) return "info";
        if (percentage >= 0.3m) return "warning";
        return "danger";
    }

    string GetInstallmentStatusBadgeClass(int status)
    {
        return status switch
        {
            1 => "bg-warning",
            2 => "bg-success",
            3 => "bg-info",
            4 => "bg-danger",
            5 => "bg-secondary",
            _ => "bg-primary"
        };
    }

    string GetPaymentStatusBadgeClass(int status)
    {
        return status switch
        {
            1 => "bg-warning", // Pendente
            2 => "bg-success", // Pago
            3 => "bg-danger",  // Vencido
            4 => "bg-secondary", // Cancelado
            _ => "bg-primary",
        };
    }
}