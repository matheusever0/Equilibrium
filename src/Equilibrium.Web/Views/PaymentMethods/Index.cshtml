@model IEnumerable<PaymentMethodModel>
@using Equilibrium.Web.Helpers
@using Equilibrium.Web.Models.PaymentMethod
@{
    ViewData["Title"] = ViewBag.Title ?? "Métodos de Pagamento";
    var isSystemView = ViewBag.IsSystemView ?? false;
    var isUserView = ViewBag.IsUserView ?? false;
}

<div class="d-flex justify-content-end mb-3">
    @if (!isSystemView && await PermissionHelper.HasPermissionAsync(Context, "paymentmethods.create"))
    {
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus me-1"></i> Novo Método de Pagamento
        </a>
    }
</div>

<div class="card shadow mb-4">
    <partial name="_Partials/Commons/_CardHeader" model='(
        Title: "Filtros",
        BadgeText: "",
        BadgeClass: "",
        Icon: "fa-filter",
        CollapseTarget: "collapseFilters")' />
    <div class="card-body collapse show" id="collapseFilters">
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="d-flex gap-2">
                    <a asp-action="Index" class="btn btn-outline-primary btn-sm @(ViewContext.RouteData.Values["action"].ToString() == "Index" && !isSystemView && !isUserView ? "active" : "")">
                        <i class="fas fa-list"></i> Todos
                    </a>
                    <a asp-action="System" class="btn btn-outline-success btn-sm @(isSystemView ? "active" : "")">
                        <i class="fas fa-cog"></i> Sistema
                    </a>
                    <a asp-action="User" class="btn btn-outline-info btn-sm @(isUserView ? "active" : "")">
                        <i class="fas fa-user"></i> Meus Métodos
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card shadow mb-4">
    <partial name="_Partials/Commons/_CardHeader" model='(
        Title: "Métodos de Pagamento",
        BadgeText: "",
        BadgeClass: "",
        Icon: "fa-wallet",
        CollapseTarget: "")' />
    <div class="card-body">
        @if (!Model.Any())
        {
            <partial name="_Partials/Commons/_EmptyState" model='(
                Message: "Nenhum método de pagamento encontrado.",
                Icon: "fa-wallet",
                ButtonText: await PermissionHelper.HasPermissionAsync(Context, "paymentmethods.create") ? "Criar Novo Método" : "",
                ButtonUrl: Url.Action("Create"),
                ButtonIcon: "fa-plus",
                IsAlert: true)' />
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-bordered table-hover datatable">
                    <thead class="bg-light">
                        <tr>
                            <th>Nome</th>
                            <th>Descrição</th>
                            <th class="text-center">Tipo</th>
                            <th class="text-center">Origem</th>
                            <th class="text-center">Data de Criação</th>
                            <th class="text-center">Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.OrderBy(e => e.Name))
                        {
                            <tr>
                                <td>
                                    <div class="fw-medium">
                                        <a asp-action="Details" asp-route-id="@item.Id">
                                            @item.Name
                                        </a>
                                    </div>
                                </td>
                                <td>@(string.IsNullOrEmpty(item.Description) ? "-" : item.Description)</td>
                                <td class="text-center">
                                    @GetPaymentMethodTypeDescription(item.Type)
                                </td>
                                <td class="text-center">
                                    <partial name="_Partials/Commons/_StatusBadge" model='(
                                        BadgeClass: item.IsSystem ? "bg-success" : "bg-info",
                                        Description: item.IsSystem ? "Sistema" : "Personalizado")' />
                                </td>
                                <td class="text-center">@item.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                <td class="text-center">
                                    <partial name="_Partials/Commons/_ActionButtons" model='(
                                        Id: item.Id,
                                        CanView: true,
                                        CanEdit: !item.IsSystem && await PermissionHelper.HasPermissionAsync(Context, "paymentmethods.edit"),
                                        CanDelete: !item.IsSystem && await PermissionHelper.HasPermissionAsync(Context, "paymentmethods.delete"),
                                        ControllerName: "PaymentMethods")' />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@functions {
    string GetPaymentMethodTypeDescription(int type)
    {
        return type switch
        {
            1 => "Dinheiro",
            2 => "Cartão de Crédito",
            3 => "Cartão de Débito",
            4 => "Transferência Bancária",
            5 => "Carteira Digital",
            6 => "Cheque",
            7 => "Outro",
            _ => "Desconhecido"
        };
    }
}