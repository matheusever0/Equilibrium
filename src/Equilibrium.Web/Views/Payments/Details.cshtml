@model PaymentModel
@using Equilibrium.Web.Helpers
@using Equilibrium.Web.Models.Payment
@{
    ViewData["Title"] = "Detalhes do Pagamento";
}

<div class="container-fluid">
    <div class="d-flex justify-content-end mb-3">
        <div>
            <partial name="_Partials/Commons/_BackButton" model='(
                Action: "Index",
                Controller: "Payments",
                Text: "Voltar")' />

            @if (await PermissionHelper.HasPermissionAsync(Context, "payments.edit"))
            {
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                    <i class="fas fa-edit me-1"></i> Editar
                </a>
            }
        </div>
    </div>

    <div class="row">
        <!-- Informações do Pagamento -->
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(
                    Title: "Informações do Pagamento",
                    BadgeText: Model.StatusDescription,
                    BadgeClass: Model.StatusBadgeClass,
                    Icon: "fa-file-invoice-dollar",
                    CollapseTarget: "")' />
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Descrição",
                                Value: Model.Description,
                                SecondaryText: "",
                                ValueClass: "")' />

                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Valor",
                                Value: Model.GetFormattedAmount(),
                                SecondaryText: "",
                                ValueClass: "fw-bold")' />

                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Data de Vencimento",
                                Value: Model.GetFormattedDueDate(),
                                SecondaryText: "",
                                ValueClass: "")' />

                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Data de Pagamento",
                                Value: Model.GetFormattedPaymentDate(),
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Tipo de Pagamento",
                                Value: "<a asp-controller=\"PaymentTypes\" asp-action=\"Details\" asp-route-id=\"" + Model.PaymentTypeId + "\">" + Model.PaymentTypeName + "</a>",
                                SecondaryText: "",
                                ValueClass: "")' />

                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Método de Pagamento",
                                Value: "<a asp-controller=\"PaymentMethods\" asp-action=\"Details\" asp-route-id=\"" + Model.PaymentMethodId + "\">" + Model.PaymentMethodName + "</a>",
                                SecondaryText: "",
                                ValueClass: "")' />

                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Recorrente",
                                Value: Model.IsRecurring ? "Sim" : "Não",
                                SecondaryText: "",
                                ValueClass: "")' />

                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Data de Criação",
                                Value: Model.CreatedAt.ToString("dd/MM/yyyy HH:mm"),
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Notes))
                    {
                        <div class="row">
                            <div class="col-12">
                                <div class="card bg-light mb-3">
                                    <div class="card-header">Observações</div>
                                    <div class="card-body">
                                        <p class="card-text">@Model.Notes</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Ações -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(
                    Title: "Ações",
                    BadgeText: "",
                    BadgeClass: "",
                    Icon: "fa-tools",
                    CollapseTarget: "")' />
                <div class="card-body">
                    @if (await PermissionHelper.HasPermissionAsync(Context, "payments.edit"))
                    {
                        @if (Model.Status == 1) // Pendente
                        {
                            <button type="button" class="btn btn-success w-100 mb-3" data-bs-toggle="modal" data-bs-target="#markAsPaidModal">
                                <i class="fas fa-check-circle me-1"></i> Marcar como Pago
                            </button>

                            <form asp-action="MarkAsOverdue" asp-route-id="@Model.Id" method="post" class="mb-3" data-page="payment">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-warning w-100">
                                    <i class="fas fa-exclamation-circle me-1"></i> Marcar como Vencido
                                </button>
                            </form>
                        }
                        else if (Model.Status == 3) // Vencido
                        {
                            <button type="button" class="btn btn-success w-100 mb-3" data-bs-toggle="modal" data-bs-target="#markAsPaidModal">
                                <i class="fas fa-check-circle me-1"></i> Marcar como Pago
                            </button>
                        }

                        @if (Model.Status != 4) // Não Cancelado
                        {
                            <form asp-controller="Payments" asp-action="Cancel" asp-route-id="@Model.Id" method="post" data-page="payment">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-danger w-100 mb-3 btn-cancel-payment" data-id="@Model.Id"
                                        onclick="return confirm('Tem certeza que deseja cancelar este pagamento?')">
                                    <i class="fas fa-ban me-1"></i> Cancelar Pagamento
                                </button>
                            </form>
                        }
                    }

                    @if (await PermissionHelper.HasPermissionAsync(Context, "payments.delete"))
                    {

                        <partial name="_Partials/Commons/_DeleteButton" model='(
                            Id: Model.Id,
                            Controller: "Payments",
                            EntityName: "pagamento",
                            Description: Model.Description,
                            CssClass: "btn btn-danger w-100",
                            CustomMessage: "Tem certeza que deseja excluir o pagamento \"" + Model.Description + "\"?\n\nEsta ação não pode ser desfeita e todas as parcelas associadas também serão excluídas.",
                            RedirectUrl: "",
                            CheckStatus: true,
                            StatusField: "Status",
                            AllowedStatuses: new[]{"1","3"}, 
                            ShowConfirmation: true,
                            IconOnly: false, 
                            ButtonText: "Excluir Pagamento")' />

                        <div data-entity-status="@Model.Status" style="display:none;"></div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Parcelas (se houver) -->
    @if (Model.Installments != null && Model.Installments.Any())
    {
        <div class="card shadow mb-4">
            <partial name="_Partials/Commons/_CardHeader" model='(
                Title: "Parcelas",
                BadgeText: Model.Installments.Count + " parcelas",
                BadgeClass: "bg-info",
                Icon: "fa-list-ol",
                CollapseTarget: "")' />
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover datatable">
                        <thead class="bg-light">
                            <tr>
                                <th>Nº</th>
                                <th>Valor</th>
                                <th>Vencimento</th>
                                <th>Pagamento</th>
                                <th>Status</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var installment in Model.Installments.OrderBy(i => i.InstallmentNumber))
                            {
                                <tr>
                                    <td>@installment.InstallmentNumber</td>
                                    <td>@installment.GetFormattedAmount()</td>
                                    <td>@installment.GetFormattedDueDate()</td>
                                    <td>@installment.GetFormattedPaymentDate()</td>
                                    <td>
                                        <partial name="_Partials/Commons/_StatusBadge" model='(
                                            BadgeClass: installment.StatusBadgeClass,
                                            Description: installment.StatusDescription)' />
                                    </td>
                                    <td>
                                        @if (await PermissionHelper.HasPermissionAsync(Context, "payments.edit"))
                                        {
                                            @if (installment.Status == 1) // Pendente
                                            {
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-sm btn-success mark-installment-paid"
                                                            data-installment-id="@installment.Id" data-bs-toggle="modal" data-bs-target="#markInstallmentPaidModal">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-warning mark-installment-overdue"
                                                            data-installment-id="@installment.Id" data-bs-toggle="modal" data-bs-target="#markInstallmentOverdueModal">
                                                        <i class="fas fa-exclamation"></i>
                                                    </button>
                                                </div>
                                            }
                                            else if (installment.Status == 3) // Vencido
                                            {
                                                <button type="button" class="btn btn-sm btn-success mark-installment-paid"
                                                        data-installment-id="@installment.Id" data-bs-toggle="modal" data-bs-target="#markInstallmentPaidModal">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modais -->
@if (await PermissionHelper.HasPermissionAsync(Context, "payments.edit"))
{
    <!-- Modal Marcar como Pago -->
    <div class="modal fade" id="markAsPaidModal" tabindex="-1" aria-labelledby="markAsPaidModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form asp-action="MarkAsPaid" asp-route-id="@Model.Id" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h5 class="modal-title" id="markAsPaidModalLabel">Marcar Pagamento como Pago</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="paymentDate" class="form-label">Data de Pagamento</label>
                            <input type="date" id="paymentDate" name="paymentDate" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                        </div>
                        <p>Confirme o pagamento de <strong>@Model.Description</strong> no valor de <strong>@Model.GetFormattedAmount()</strong>.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-check-circle me-1"></i> Confirmar Pagamento
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal Marcar Parcela como Paga -->
    <div class="modal fade" id="markInstallmentPaidModal" tabindex="-1" aria-labelledby="markInstallmentPaidModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="markInstallmentPaidForm" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h5 class="modal-title" id="markInstallmentPaidModalLabel">Marcar Parcela como Paga</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="installmentPaymentDate" class="form-label">Data de Pagamento</label>
                            <input type="date" id="installmentPaymentDate" name="paymentDate" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                        </div>
                        <p>Confirme o pagamento desta parcela.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-success">Marcar como Pago</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal Marcar Parcela como Vencida -->
    <div class="modal fade" id="markInstallmentOverdueModal" tabindex="-1" aria-labelledby="markInstallmentOverdueModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="markInstallmentOverdueForm" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h5 class="modal-title" id="markInstallmentOverdueModalLabel">Marcar Parcela como Vencida</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Tem certeza que deseja marcar esta parcela como vencida?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-warning">Marcar como Vencido</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.mark-installment-paid').forEach(button => {
                button.addEventListener('click', function() {
                    const installmentId = this.getAttribute('data-installment-id');
                    const form = document.getElementById('markInstallmentPaidForm');
                    form.action = `/PaymentInstallments/MarkAsPaid/${installmentId}`;
                });
            });

            document.querySelectorAll('.mark-installment-overdue').forEach(button => {
                button.addEventListener('click', function() {
                    const installmentId = this.getAttribute('data-installment-id');
                    const form = document.getElementById('markInstallmentOverdueForm');
                    form.action = `/PaymentInstallments/MarkAsOverdue/${installmentId}`;
                });
            });
        });
    </script>
}