@model Equilibrium.Web.Models.TeamDistributionViewModel

@{
    ViewData["Title"] = "Gerador de Times";
    Layout = "_TeamGeneratorLayout";
}

<div class="page-header">
    <h1 class="page-title">Gerador de Times</h1>
    <p class="page-subtitle">Distribuição aleatória de jogadores por time com prioridades</p>
</div>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i> @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (!string.IsNullOrEmpty(Model.SuccessMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill me-2"></i> @Model.SuccessMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row">
    <!-- Formulário para importar CSV e gerar times -->
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <i class="bi bi-upload me-2"></i> Importar e Gerar Times
            </div>
            <div class="card-body">
                <form asp-action="UploadCsvAndGenerateTeams" method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="csvFile" class="form-label">Arquivo CSV</label>
                        <input type="file" class="form-control" id="csvFile" name="csvFile" accept=".csv" required>
                        <div class="form-text">
                            Formato: Nickname;Level;Gira50x;Descanso;Prelive;MaxEnergia
                        </div>
                        <div class="mt-2">
                            <a asp-action="DownloadSampleCsv" class="btn btn-outline-secondary btn-sm">
                                <i class="bi bi-download"></i> Baixar modelo CSV
                            </a>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="maxPlayersPerTeam" class="form-label">Máximo de jogadores por time</label>
                        <input type="number" class="form-control" id="maxPlayersPerTeam" name="maxPlayersPerTeam"
                               value="@Model.MaxPlayersPerTeam" min="1" required>
                    </div>

                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-shuffle"></i> Importar e Gerar Times
                    </button>
                </form>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-header bg-info text-white">
                <i class="bi bi-info-circle me-2"></i> Prioridades de Distribuição
            </div>
            <div class="card-body">
                <p>Os jogadores são distribuídos respeitando as seguintes prioridades:</p>

                <ol class="priority-list">
                    <li><strong>Prelive:</strong> Jogadores com esta característica têm maior prioridade</li>
                    <li><strong>Gira50x:</strong> Segunda prioridade</li>
                    <li><strong>Descanso:</strong> Jogadores com Prelive ou Gira50x que também têm Descanso</li>
                    <li><strong>Level + Energia:</strong> Dentro de cada categoria</li>
                </ol>

                <div class="alert alert-warning mt-3 mb-0">
                    <small>
                        <i class="bi bi-lightbulb-fill me-1"></i>
                        <strong>Atenção:</strong> Quando há número ímpar de times, o sistema prioriza colocar os
                        jogadores mais fortes com características especiais (principalmente Prelive) no último time.
                    </small>
                </div>
            </div>
        </div>

        @if (Model.Teams != null && Model.Teams.Any())
        {
            <div class="card mt-3">
                <div class="card-header bg-success text-white">
                    <i class="bi bi-file-earmark-spreadsheet me-2"></i> Exportar Resultados
                </div>
                <div class="card-body">
                    <form id="exportForm" method="post">
                        <input type="hidden" id="teamsData" name="teamsData"
                               value="@System.Text.Json.JsonSerializer.Serialize(Model.Teams)" />
                        <button type="button" id="exportButton" class="btn btn-success w-100">
                            <i class="bi bi-download"></i> Exportar Times para CSV
                        </button>
                    </form>
                </div>
            </div>
        }
    </div>

    <!-- Times gerados -->
    <div class="col-lg-8">
        @if (Model.Teams != null && Model.Teams.Any())
        {
            <div class="card team-card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <i class="bi bi-people-fill me-2"></i> Times Gerados
                        </div>
                        <div>
                            <span class="badge bg-light text-dark me-2">
                                @(Model.Teams.Sum(t => t.Players.Count)) Jogadores |
                                @Model.Teams.Count Time(s)
                            </span>
                            <button id="btnExpandAll" class="btn btn-sm btn-light">
                                <i class="bi bi-arrows-expand"></i> Expandir Todos
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="accordion" id="teamsAccordion">
                        @foreach (var team in Model.Teams)
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading@(team.TeamNumber)">
                                    <button class="accordion-button @(team.TeamNumber > 1 ? "collapsed" : "")"
                                            type="button" data-bs-toggle="collapse"
                                            data-bs-target="#collapse@(team.TeamNumber)"
                                            aria-expanded="@(team.TeamNumber == 1 ? "true" : "false")"
                                            aria-controls="collapse@(team.TeamNumber)">
                                        <strong>Time @team.TeamNumber</strong>
                                        <span class="ms-2 badge bg-primary">@team.Players.Count jogadores</span>
                                        <span class="ms-2 badge bg-success">
                                            Level Total: @team.Players.Sum(p => p.Level)
                                        </span>
                                        <span class="ms-2 badge bg-danger">
                                            @team.Players.Count(p => p.Prelive) Prelive
                                        </span>
                                        <span class="ms-2 badge bg-warning text-dark">
                                            @team.Players.Count(p => p.Gira50x) Gira50x
                                        </span>
                                        <span class="ms-2 badge bg-info text-dark">
                                            @team.Players.Count(p => p.Descanso) Descanso
                                        </span>
                                    </button>
                                </h2>
                                <div id="collapse@(team.TeamNumber)"
                                     class="accordion-collapse collapse @(team.TeamNumber == 1 ? "show" : "")"
                                     aria-labelledby="heading@(team.TeamNumber)"
                                     data-bs-parent="#teamsAccordion">
                                    <div class="accordion-body p-0">
                                        <div class="table-responsive">
                                            <table class="table table-striped table-sm mb-0">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th style="width: 50px">#</th>
                                                        <th>Nickname</th>
                                                        <th style="width: 70px">Level</th>
                                                        <th style="width: 90px">Características</th>
                                                        <th style="width: 120px">Máx. Energia</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @for (int i = 0; i < team.Players.Count; i++)
                                                    {
                                                        var player = team.Players[i];
                                                        <tr>
                                                            <td class="text-center">@(i + 1)</td>
                                                            <td><strong>@player.Nickname</strong></td>
                                                            <td class="text-center">@player.Level</td>
                                                            <td>
                                                                @if (player.Prelive)
                                                                {
                                                                    <span class="player-tag prelive">Prelive</span>
                                                                }
                                                                @if (player.Gira50x)
                                                                {
                                                                    <span class="player-tag gira50x">Gira50x</span>
                                                                }
                                                                @if (player.Descanso)
                                                                {
                                                                    <span class="player-tag descanso">Descanso</span>
                                                                }
                                                            </td>
                                                            <td class="text-end">@player.MaxEnergia.ToString("N0")</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-body text-center py-5">
                    <i class="bi bi-people" style="font-size: 4rem; color: #ddd;"></i>
                    <h3 class="mt-3">Nenhum Time Gerado</h3>
                    <p class="text-muted">
                        Importe um arquivo CSV com a lista de jogadores para gerar os times.
                    </p>
                    <div class="mt-4">
                        <div class="feature-item">
                            <i class="bi bi-upload feature-icon"></i>
                            <strong>Importação Simples</strong> - Apenas faça upload do seu arquivo CSV
                        </div>
                        <div class="feature-item">
                            <i class="bi bi-shuffle feature-icon"></i>
                            <strong>Distribuição Inteligente</strong> - Jogadores distribuídos respeitando prioridades
                        </div>
                        <div class="feature-item">
                            <i class="bi bi-download feature-icon"></i>
                            <strong>Exportação Fácil</strong> - Exporte seus times gerados para CSV
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Configurar botão de exportação
            document.getElementById('exportButton')?.addEventListener('click', function() {
                const teamsData = document.getElementById('teamsData').value;
                window.location.href = '@Url.Action("GetTeamsCsv")?teamsData=' + encodeURIComponent(teamsData);
            });

            // Configurar botão para expandir/contrair todos os times
            const btnExpandAll = document.getElementById('btnExpandAll');
            if (btnExpandAll) {
                let allExpanded = false;

                btnExpandAll.addEventListener('click', function() {
                    const accordionItems = document.querySelectorAll('.accordion-collapse');

                    if (allExpanded) {
                        // Contrair todos
                        accordionItems.forEach(item => {
                            item.classList.remove('show');

                            // Atualizar botão do accordion
                            const accordionButton = document.querySelector(`[data-bs-target="#${item.id}"]`);
                            if (accordionButton) {
                                accordionButton.classList.add('collapsed');
                                accordionButton.setAttribute('aria-expanded', 'false');
                            }
                        });

                        // Atualizar botão e ícone
                        btnExpandAll.innerHTML = '<i class="bi bi-arrows-expand"></i> Expandir Todos';
                        allExpanded = false;
                    } else {
                        // Expandir todos
                        accordionItems.forEach(item => {
                            item.classList.add('show');

                            // Atualizar botão do accordion
                            const accordionButton = document.querySelector(`[data-bs-target="#${item.id}"]`);
                            if (accordionButton) {
                                accordionButton.classList.remove('collapsed');
                                accordionButton.setAttribute('aria-expanded', 'true');
                            }
                        });

                        // Atualizar botão e ícone
                        btnExpandAll.innerHTML = '<i class="bi bi-arrows-collapse"></i> Contrair Todos';
                        allExpanded = true;
                    }
                });
            }
        });
    </script>
}