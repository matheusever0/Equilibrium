@using Equilibrium.Web.Helpers
@using Equilibrium.Web.Models.Investment
@model InvestmentModel

@{
    ViewData["Title"] = "Detalhes do Investimento: " + @Model.Symbol + " - " + @Model.Name;

    // Função helper para formatação de moeda
    string FormatCurrency(decimal value, string currency)
    {
        return currency == "BRL"
            ? string.Format("{0:C2}", value)
            : currency == "USD"
                ? $"$ {value:N2}"
                : currency == "EUR"
                    ? $"€ {value:N2}"
                    : currency == "GBP"
                        ? $"£ {value:N2}"
                        : $"{currency} {value:N2}";
    }

    // Símbolo da moeda para uso em scripts
    string currencySymbol = Model.Currency == "BRL" ? "R$" :
                           Model.Currency == "USD" ? "$" :
                           Model.Currency == "EUR" ? "€" :
                           Model.Currency == "GBP" ? "£" :
                           Model.Currency;
}

<div class="container-fluid">
    <div class="d-flex justify-content-end mb-3">
        <div>
            @if (await PermissionHelper.HasPermissionAsync(Context, "investments.edit"))
            {
                <form asp-action="RefreshPrice" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-info">
                        <i class="fas fa-sync-alt me-1"></i>Atualizar Preço
                    </button>
                </form>
            }
            <partial name="_Partials/Commons/_BackButton" model='(
                Action: "Index",
                Controller: "Investments",
                Text: "Voltar")' />
        </div>
    </div>

    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(
                    Title: "Dados do Investimento",
                    BadgeText: "",
                    BadgeClass: "",
                    Icon: "fa-chart-line",
                    CollapseTarget: "")' />
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Símbolo",
                                Value: Model.Symbol,
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                        <div class="col-md-4">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Tipo",
                                Value: Model.Type switch
                                {
                                    1 => "Ações",
                                    2 => "Fundos Imobiliários",
                                    3 => "ETFs",
                                    4 => "Ações Estrangeiras",
                                    5 => "Renda Fixa",
                                    _ => "Não Categorizado"
                                },
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                        <div class="col-md-4">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Moeda",
                                Value: Model.Currency,
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Quantidade Total",
                                Value: Model.TotalQuantity.ToString("N2"),
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Preço Médio",
                                Value: FormatCurrency(Model.AveragePrice, Model.Currency),
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Preço Atual",
                                Value: FormatCurrency(Model.CurrentPrice, Model.Currency),
                                SecondaryText: "Última atualização: " + Model.LastUpdate.ToString("dd/MM/yyyy HH:mm"),
                                ValueClass: "")' />
                        </div>
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Total Investido",
                                Value: FormatCurrency(Model.TotalInvested, Model.Currency),
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Valor Atual",
                                Value: FormatCurrency(Model.CurrentTotal, Model.Currency),
                                SecondaryText: "",
                                ValueClass: "")' />
                        </div>
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(
                                Label: "Ganho/Perda",
                                Value: (Model.GainLossPercentage > 0 ? "<i class=\"fas fa-arrow-up me-1\"></i>" :
                                       Model.GainLossPercentage < 0 ? "<i class=\"fas fa-arrow-down me-1\"></i>" : "") +
                                       FormatCurrency(Model.GainLossValue, Model.Currency) + " (" + Model.GainLossPercentage.ToString("N2") + "%)",
                                SecondaryText: "",
                                ValueClass: Model.GainLossPercentage > 0 ? "text-success" :
                                           Model.GainLossPercentage < 0 ? "text-danger" : "text-muted")' />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(
                    Title: "Desempenho",
                    BadgeText: "",
                    BadgeClass: "",
                    Icon: "fa-chart-area",
                    CollapseTarget: "")' />
                <div class="card-body">
                    <div class="performance-chart-container">
                        <canvas id="performanceChart" height="300" data-investment-id="@Model.Id" data-currency="@Model.Currency"></canvas>
                    </div>
                    <div class="mt-3 text-center text-muted">
                        <small>Gráfico de desempenho baseado nas transações e preços atualizados.</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow mb-4">
        <partial name="_Partials/Commons/_CardHeader" model='(
            Title: "Histórico de Transações",
            BadgeText: "",
            BadgeClass: "",
            Icon: "fa-exchange-alt",
            CollapseTarget: "")' />
        <div class="card-body">
            @if (!Model.Transactions.Any())
            {
                <partial name="_Partials/Commons/_EmptyState" model='(
                    Message: "Nenhuma transação registrada para este investimento.",
                    Icon: "fa-exchange-alt",
                    ButtonText: await PermissionHelper.HasPermissionAsync(Context, "investments.transactions.create") ? "Registrar primeira transação" : "",
                    ButtonUrl: Url.Action("Create", "InvestmentTransactions", new { investmentId = Model.Id }),
                    ButtonIcon: "fa-plus",
                    IsAlert: false)' />
            }
            else
            {
                <div class="d-flex justify-content-end mb-3">
                    @if (await PermissionHelper.HasPermissionAsync(Context, "investments.transactions.create"))
                    {
                        <a asp-controller="InvestmentTransactions" asp-action="Create" asp-route-investmentId="@Model.Id" class="btn btn-sm btn-primary">
                            <i class="fas fa-plus me-1"></i>Nova Transação
                        </a>
                    }
                </div>
                <div class="table-responsive">
                    <table class="table table-bordered table-hover datatable">
                        <thead class="bg-light">
                            <tr>
                                <th>Data</th>
                                <th>Tipo</th>
                                <th class="text-center">Quantidade</th>
                                <th class="text-center">Preço</th>
                                <th class="text-center">Taxas</th>
                                <th class="text-center">Total</th>
                                <th>Corretora</th>
                                <th>Observações</th>
                                <th class="text-center">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in Model.Transactions.OrderByDescending(t => t.Date))
                            {
                                <tr>
                                    <td>@transaction.Date.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        @{
                                            var transactionType = transaction.Type switch
                                            {
                                                1 => "Compra",
                                                2 => "Venda",
                                                3 => "Dividendo",
                                                4 => "Split",
                                                5 => "Bonificação",
                                                6 => "JCP",
                                                7 => "Rendimento",
                                                _ => "Outros"
                                            };
                                        }
                                        @transactionType
                                    </td>
                                    <td class="text-center">@transaction.Quantity.ToString("N2")</td>
                                    <td class="text-center">@FormatCurrency(transaction.Price, Model.Currency)</td>
                                    <td class="text-center">@FormatCurrency(transaction.Taxes, Model.Currency)</td>
                                    <td class="text-center">@FormatCurrency(transaction.TotalValue, Model.Currency)</td>
                                    <td>@transaction.Broker</td>
                                    <td>@transaction.Notes</td>
                                    <td class="text-center">
                                        @if (await PermissionHelper.HasPermissionAsync(Context, "investments.transactions.delete"))
                                        {
                                            <form asp-controller="InvestmentTransactions" asp-action="Delete" method="post" class="d-inline"
                                                  onsubmit="return confirm('Tem certeza que deseja excluir esta transação? Esta ação afetará o cálculo do preço médio e não pode ser desfeita.');">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@transaction.Id" />
                                                <input type="hidden" name="investmentId" value="@Model.Id" />
                                                <button type="submit" class="btn btn-sm btn-danger">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializa o gráfico de desempenho com a moeda correta
            const chartCanvas = document.getElementById('performanceChart');
            if (chartCanvas) {
                const investmentId = chartCanvas.getAttribute('data-investment-id');
                const currency = chartCanvas.getAttribute('data-currency') || 'BRL';

                // Configuração para gráfico de linha baseado na moeda
                // Simulação de dados - Este código deve ser substituído pela chamada real à API
                const labels = [
                    'Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun',
                    'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'
                ];

                const values = generateMockData();

                // Utiliza a função do módulo Charts com o parâmetro de moeda
                if (FinanceSystem.Modules && FinanceSystem.Modules.Charts) {
                    FinanceSystem.Modules.Charts.createLineChart('performanceChart', labels, values, {}, currency);
                } else if (typeof Chart !== 'undefined') {
                    createPerformanceChart(chartCanvas, labels, values, currency);
                }
            }
        });

        // Função para gerar dados simulados
        function generateMockData() {
            const data = [];
            let value = 5000 + Math.random() * 2000;

            for (let i = 0; i < 12; i++) {
                // Adiciona variação para simular movimentos do mercado
                value = value * (1 + (Math.random() * 0.1 - 0.03));
                data.push(value.toFixed(2));
            }

            return data;
        }

        // Função para criar gráfico de desempenho (fallback)
        function createPerformanceChart(canvas, labels, values, currency = 'BRL') {
            const currencySymbol = currency === 'BRL' ? 'R$ ' :
                                  currency === 'USD' ? '$ ' :
                                  currency === 'EUR' ? '€ ' :
                                  currency === 'GBP' ? '£ ' : currency + ' ';

            const useComma = ['BRL', 'EUR'].includes(currency);

            // Formata número para o padrão da moeda
            function formatValue(value) {
                if (useComma) {
                    return currencySymbol + value.toLocaleString('pt-BR', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                } else {
                    return currencySymbol + value.toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                }
            }

            new Chart(canvas, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Valor Total (' + currencySymbol + ')',
                        backgroundColor: 'rgba(78, 115, 223, 0.05)',
                        borderColor: 'rgba(78, 115, 223, 1)',
                        pointBackgroundColor: 'rgba(78, 115, 223, 1)',
                        pointBorderColor: '#fff',
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(78, 115, 223, 1)',
                        data: values,
                        fill: true,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            ticks: {
                                callback: function (value) {
                                    return formatValue(value);
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return formatValue(context.parsed.y);
                                }
                            }
                        }
                    }
                }
            });
        }
    </script>
}