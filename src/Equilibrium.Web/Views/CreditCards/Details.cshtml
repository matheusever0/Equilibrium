@model CreditCardModel
@using Equilibrium.Web.Helpers
@using Equilibrium.Web.Models.CreditCard
@using Equilibrium.Web.Models.Payment
@{
    ViewData["Title"] = "Detalhes do Cartão de Crédito";
    var paymentsWithCard = ViewBag.PaymentsWithCard as IEnumerable<PaymentModel> ?? new List<PaymentModel>();
    var usedPercentage = (Model.Limit - Model.AvailableLimit) / Model.Limit * 100;
    var colorClass = usedPercentage > 75 ? "danger" : (usedPercentage > 50 ? "warning" : "success");
    var usedAmount = Model.Limit - Model.AvailableLimit;
}

@section Styles {
    <link rel="stylesheet" href="~/css/pages/creditcards.css" asp-append-version="true">
}

<div class="container-fluid">
    <div class="d-flex justify-content-end mb-3">
        <partial name="_Partials/Commons/_BackButton" model='(Action: "Index", Controller: "CreditCards", Text: "Voltar")' />
        @if (await PermissionHelper.HasPermissionAsync(Context, "creditcards.edit"))
        {
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary me-2">
                <i class="fas fa-edit me-1"></i> Editar
            </a>
            @if (usedAmount > 0)
            {
                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#payInvoiceModal">
                    <i class="fas fa-money-bill-wave me-1"></i> Pagar Fatura
                </button>
            }
        }
    </div>

    <div class="row">
        <!-- Informações do Cartão -->
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(Title: "Informações do Cartão", BadgeText: Model.CardBrand, BadgeClass: "bg-primary", Icon: "fa-credit-card", CollapseTarget: "")' />
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Nome", Value: Model.Name, SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Últimos 4 Dígitos", Value: Model.LastFourDigits, SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Dia de Fechamento", Value: Model.ClosingDay.ToString(), SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Dia de Vencimento", Value: Model.DueDay.ToString(), SecondaryText: "", ValueClass: "")' />
                        </div>
                        <div class="col-md-6">
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Limite Total", Value: Model.GetFormattedLimit(), SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Limite Disponível", Value: Model.GetFormattedAvailableLimit(), SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Limite Utilizado", Value: Model.GetFormattedUsedLimit() + " (" + Model.GetFormattedUsedPercentage() + ")", SecondaryText: "", ValueClass: "")' />
                            <partial name="_Partials/Commons/_FinancialDataItem" model='(Label: "Data de Criação", Value: Model.CreatedAt.ToString("dd/MM/yyyy HH:mm"), SecondaryText: "", ValueClass: "")' />
                        </div>
                    </div>

                    <div class="mt-3">
                        <partial name="_Partials/Commons/_MetricCard" model='(
                            Title: "Utilização do Limite",
                            Value: string.Format("{0:0}%", usedPercentage),
                            Icon: "fa-percentage",
                            Color: colorClass,
                            SubValue: Model.GetFormattedUsedLimit(),
                            ShowProgress: true)' />
                    </div>
                </div>
            </div>
        </div>

        <!-- Ações -->
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(Title: "Ações", BadgeText: "", BadgeClass: "", Icon: "fa-tools", CollapseTarget: "")' />
                <div class="card-body">
                    <a asp-controller="Payments" asp-action="Create" asp-route-paymentMethodId="@Model.PaymentMethodId" asp-route-creditCardId="@Model.Id" class="btn btn-success w-100 mb-3">
                        <i class="fas fa-plus me-1"></i> Criar Novo Pagamento com Este Cartão
                    </a>

                    <a asp-controller="Payments" asp-action="ByMethod" asp-route-id="@Model.PaymentMethodId" class="btn btn-info w-100 mb-3">
                        <i class="fas fa-list me-1"></i> Ver Pagamentos com Este Cartão
                    </a>

                    @if (await PermissionHelper.HasPermissionAsync(Context, "creditcards.edit"))
                    {
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary w-100 mb-3">
                            <i class="fas fa-edit me-1"></i> Editar Cartão
                        </a>

                        @if (usedAmount > 0)
                        {
                            <button type="button" class="btn btn-success w-100 mb-3" data-bs-toggle="modal" data-bs-target="#payInvoiceModal">
                                <i class="fas fa-money-bill-wave me-1"></i> Pagar Fatura (@usedAmount.ToString("C2"))
                            </button>
                        }
                        else
                        {
                            <div class="alert alert-success text-center mb-3">
                                <i class="fas fa-check-circle me-2"></i>
                                <strong>Cartão quitado!</strong><br>
                                <small>Não há fatura pendente para pagamento</small>
                            </div>
                        }
                    }

                    @if (await PermissionHelper.HasPermissionAsync(Context, "creditcards.delete"))
                    {
                        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-outline-danger w-100">
                            <i class="fas fa-trash me-1"></i> Excluir Cartão
                        </a>
                    }
                </div>
            </div>

            <div class="card shadow mb-4">
                <partial name="_Partials/Commons/_CardHeader" model='(Title: "Data de Pagamento da Fatura", BadgeText: "", BadgeClass: "", Icon: "fa-calendar-alt", CollapseTarget: "")' />
                <div class="card-body">
                    <div class="text-center">
                        @{
                            var today = DateTime.Today;
                            var closingDay = Model.ClosingDay;
                            var dueDay = Model.DueDay;

                            DateTime nextClosingDate;
                            DateTime nextDueDate;

                            if (today.Day <= closingDay)
                            {
                                nextClosingDate = new DateTime(today.Year, today.Month, closingDay);
                            }
                            else
                            {
                                nextClosingDate = today.AddMonths(1);
                                nextClosingDate = new DateTime(nextClosingDate.Year, nextClosingDate.Month, closingDay);
                            }

                            if (today.Day <= dueDay)
                            {
                                nextDueDate = new DateTime(today.Year, today.Month, dueDay);
                            }
                            else
                            {
                                nextDueDate = today.AddMonths(1);
                                nextDueDate = new DateTime(nextDueDate.Year, nextDueDate.Month, dueDay);
                            }

                            var daysToClosing = (nextClosingDate - today).Days;
                            var daysToDue = (nextDueDate - today).Days;
                        }

                        <div class="row mt-3">
                            <div class="col-md-6">
                                <partial name="_Partials/Commons/_MetricCard" model='(
                                    Title: "Próximo Fechamento",
                                    Value: nextClosingDate.ToString("dd/MM/yyyy"),
                                    Icon: "fa-calendar-check",
                                    Color: "primary",
                                    SubValue: $"Faltam {daysToClosing} dias",
                                    ShowProgress: false)' />
                            </div>
                            <div class="col-md-6">
                                <partial name="_Partials/Commons/_MetricCard" model='(
                                    Title: "Próximo Vencimento",
                                    Value: nextDueDate.ToString("dd/MM/yyyy"),
                                    Icon: "fa-calendar-day",
                                    Color: "danger",
                                    SubValue: $"Faltam {daysToDue} dias",
                                    ShowProgress: false)' />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Pagamentos Recentes -->
    @if (paymentsWithCard.Any())
    {
        <div class="card shadow mb-4">
            <partial name="_Partials/Commons/_CardHeader" model='(Title: "Pagamentos Recentes com Este Cartão", BadgeText: "", BadgeClass: "", Icon: "fa-history", CollapseTarget: "")' />
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped mb-0">
                        <thead>
                            <tr>
                                <th>Descrição</th>
                                <th>Data</th>
                                <th>Vencimento</th>
                                <th class="text-end">Valor</th>
                                <th class="text-center">Status</th>
                                <th class="text-center">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in paymentsWithCard.OrderByDescending(p => p.CreatedAt).Take(10))
                            {
                                <tr>
                                    <td>@payment.Description</td>
                                    <td>@payment.CreatedAt.ToString("dd/MM/yyyy")</td>
                                    <td>@payment.DueDate.ToString("dd/MM/yyyy")</td>
                                    <td class="text-end">@payment.GetFormattedAmount()</td>
                                    <td class="text-center">
                                        <partial name="_Partials/Commons/_StatusBadge" model="(BadgeClass: payment.StatusBadgeClass, Description: payment.StatusDescription)" />
                                    </td>
                                    <td class="text-center">
                                        <partial name="_Partials/Commons/_ActionButtons" model='(
                                            Id: payment.Id,
                                            CanView: true,
                                            CanEdit: false,
                                            CanDelete: false,
                                            ControllerName: "Payments")' />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="p-3 text-center">
                    <a asp-controller="Payments" asp-action="ByMethod" asp-route-id="@Model.PaymentMethodId" class="btn btn-sm btn-primary">
                        Ver Todos os Pagamentos
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <partial name="_Partials/Commons/_EmptyState" model='(
            Message: "Nenhum pagamento realizado com este cartão.",
            Icon: "fa-credit-card",
            ButtonText: "Criar Novo Pagamento",
            ButtonUrl: Url.Action("Create", "Payments", new { paymentMethodId = Model.PaymentMethodId, creditCardId = Model.Id }),
            ButtonIcon: "fa-plus",
            IsAlert: true)' />
    }
</div>

<!-- Modal para Pagar Fatura -->
<div class="modal fade" id="payInvoiceModal" tabindex="-1" aria-labelledby="payInvoiceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="payInvoiceModalLabel">
                    <i class="fas fa-money-bill-wave me-2"></i>Pagar Fatura do Cartão
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="payInvoiceForm">
                    @Html.AntiForgeryToken()

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Cartão:</strong> @Model.Name (@Model.CardBrand *@Model.LastFourDigits)<br>
                        <strong>Limite Total:</strong> @Model.GetFormattedLimit()<br>
                        <strong>Limite Disponível:</strong> @Model.GetFormattedAvailableLimit()<br>
                        <strong>Valor Utilizado:</strong> @usedAmount.ToString("C2")
                    </div>

                    <div class="mb-3">
                        <label for="paymentAmount" class="form-label">Valor do Pagamento *</label>
                        <div class="input-group">
                            <span class="input-group-text">R$</span>
                            <input type="number"
                                   class="form-control"
                                   id="paymentAmount"
                                   name="paymentAmount"
                                   step="0.01"
                                   min="0.01"
                                   max="@usedAmount"
                                   placeholder="0,00"
                                   required>
                        </div>
                        <div class="form-text">
                            Valor máximo: @usedAmount.ToString("C2") (valor total utilizado)
                        </div>
                        <div class="invalid-feedback" id="paymentError"></div>
                    </div>

                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="setPaymentAmount(@usedAmount.ToString(System.Globalization.CultureInfo.InvariantCulture))">
                                Pagar Total (@usedAmount.ToString("C2"))
                            </button>
                            <button type="button"
                                    class="btn btn-outline-secondary btn-sm"
                                    onclick="setPaymentAmount(@((usedAmount / 2).ToString(System.Globalization.CultureInfo.InvariantCulture)))">
                                Pagar Metade (@((usedAmount / 2).ToString("C2")))
                            </button>
                        </div>
                    </div>

                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <small>
                            <strong>Nota:</strong> Este pagamento apenas atualiza o limite disponível do cartão.
                            Para registro contábil completo, registre também um pagamento no sistema.
                        </small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Cancelar
                </button>
                <button type="button" class="btn btn-success" id="confirmPayment">
                    <i class="fas fa-money-bill-wave me-1"></i>Confirmar Pagamento
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('payInvoiceModal');
            const form = document.getElementById('payInvoiceForm');
            const paymentAmountInput = document.getElementById('paymentAmount');
            const confirmButton = document.getElementById('confirmPayment');
            const paymentError = document.getElementById('paymentError');
            const maxPayment = parseFloat("@usedAmount.ToString(System.Globalization.CultureInfo.InvariantCulture)");

            // Função para definir valor do pagamento
            window.setPaymentAmount = function(amount) {
                paymentAmountInput.value = amount.toFixed(2);
                paymentAmountInput.dispatchEvent(new Event('input'));
            };

            // Validação em tempo real
            paymentAmountInput.addEventListener('input', function() {
                this.classList.remove('is-invalid');
                paymentError.textContent = '';

                const value = parseFloat(this.value);
                if (value <= 0) {
                    this.classList.add('is-invalid');
                    paymentError.textContent = 'O valor deve ser maior que zero.';
                } else if (value > maxPayment) {
                    this.classList.add('is-invalid');
                    paymentError.textContent = `O valor não pode ser maior que R$ ${maxPayment.toFixed(2)}.`;
                }
            });

            // Confirmar pagamento
            confirmButton.addEventListener('click', function() {
                const paymentAmount = parseFloat(paymentAmountInput.value);

                // Validações
                if (!paymentAmount || paymentAmount <= 0) {
                    paymentAmountInput.classList.add('is-invalid');
                    paymentError.textContent = 'Por favor, informe um valor válido maior que zero.';
                    return;
                }

                if (paymentAmount > maxPayment) {
                    paymentAmountInput.classList.add('is-invalid');
                    paymentError.textContent = `O valor não pode ser maior que R$ ${maxPayment.toFixed(2)}.`;
                    return;
                }

                // Confirmar ação
                const confirmed = confirm(
                    `Confirmar pagamento de ${paymentAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}?\n\n` +
                    'Esta ação irá aumentar o limite disponível do cartão.'
                );
                if (!confirmed) return;

                // Desabilitar botão e mostrar loading
                confirmButton.disabled = true;
                confirmButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processando...';

                // Fazer requisição
                payInvoice('@Model.Id', paymentAmount);
            });

            // Função para processar pagamento
        function payInvoice(cardId, paymentAmount) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(`/CreditCards/PayInvoice/${cardId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(paymentAmount)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const bootstrapModal = bootstrap.Modal.getInstance(modal);
                    bootstrapModal.hide();

                    alert(data.message);
                    window.location.reload();
                } else {
                    alert('Erro: ' + data.message);
                    confirmButton.disabled = false;
                    confirmButton.innerHTML = '<i class="fas fa-money-bill-wave me-1"></i>Confirmar Pagamento';
                }
            })
            .catch(error => {
                console.error('Erro:', error);
                alert('Erro interno. Tente novamente.');
                confirmButton.disabled = false;
                confirmButton.innerHTML = '<i class="fas fa-money-bill-wave me-1"></i>Confirmar Pagamento';
            });
        }

            // Reset form when modal closes
            modal.addEventListener('hidden.bs.modal', function() {
                form.reset();
                paymentAmountInput.classList.remove('is-invalid');
                paymentError.textContent = '';
                confirmButton.disabled = false;
                confirmButton.innerHTML = '<i class="fas fa-money-bill-wave me-1"></i>Confirmar Pagamento';
            });
        });
    </script>
}