<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error.NotFound" xml:space="preserve">
    <value>{0} with ID {1} not found</value>
  </data>
  <data name="Error.InvalidOperation" xml:space="preserve">
    <value>Invalid operation: {0}</value>
  </data>
  <data name="Error.Unauthorized" xml:space="preserve">
    <value>Unauthorized access: {0}</value>
  </data>
  <data name="Error.Generic" xml:space="preserve">
    <value>An unexpected error occurred</value>
  </data>
  <data name="Error.InvalidArgument" xml:space="preserve">
    <value>Invalid argument: {0}</value>
  </data>
  <data name="Entity.NotFound" xml:space="preserve">
    <value>{0} with ID {1} not found</value>
  </data>
  <data name="Auth.LoginAttempt" xml:space="preserve">
    <value>Login attempt for user: {0}</value>
  </data>
  <data name="Auth.LoginSuccess" xml:space="preserve">
    <value>Successful login for user: {0}</value>
  </data>
  <data name="Auth.LoginFailed" xml:space="preserve">
    <value>Failed login for user: {0}</value>
  </data>
  <data name="Auth.TokenValid" xml:space="preserve">
    <value>Valid token for user: {0}</value>
  </data>
  <data name="Auth.TokenInvalid" xml:space="preserve">
    <value>Invalid or expired token</value>
  </data>
  <data name="Auth.TokenVerifyError" xml:space="preserve">
    <value>Error verifying token</value>
  </data>
  <data name="User.GetAll" xml:space="preserve">
    <value>Getting all users</value>
  </data>
  <data name="User.Get" xml:space="preserve">
    <value>Getting user with ID: {0}</value>
  </data>
  <data name="User.Create" xml:space="preserve">
    <value>Creating new user: {0}</value>
  </data>
  <data name="User.Update" xml:space="preserve">
    <value>Updating user with ID: {0}</value>
  </data>
  <data name="User.Delete" xml:space="preserve">
    <value>Deleting user with ID: {0}</value>
  </data>
  <data name="User.NotFound" xml:space="preserve">
    <value>User with ID {0} not found</value>
  </data>
  <data name="User.Unauthorized" xml:space="preserve">
    <value>User attempted to access user data that doesn't belong to them</value>
  </data>
  <data name="Payment.GetAll" xml:space="preserve">
    <value>Getting all payments for user</value>
  </data>
  <data name="Payment.Get" xml:space="preserve">
    <value>Getting payment with ID: {0}</value>
  </data>
  <data name="Payment.Create" xml:space="preserve">
    <value>Creating new payment</value>
  </data>
  <data name="Payment.Update" xml:space="preserve">
    <value>Updating payment with ID: {0}</value>
  </data>
  <data name="Payment.Delete" xml:space="preserve">
    <value>Deleting payment with ID: {0}</value>
  </data>
  <data name="Payment.NotFound" xml:space="preserve">
    <value>Payment with ID {0} not found</value>
  </data>
  <data name="Payment.Unauthorized" xml:space="preserve">
    <value>User attempted to access payment that doesn't belong to them. PaymentId: {0}</value>
  </data>
  <data name="Payment.GetByMonth" xml:space="preserve">
    <value>Getting payments for {0}/{1}</value>
  </data>
  <data name="Payment.InvalidMonth" xml:space="preserve">
    <value>Month must be between 1 and 12</value>
  </data>
  <data name="Payment.CannotDeletePaid" xml:space="preserve">
    <value>Cannot delete a paid payment</value>
  </data>
  <data name="Payment.MarkAsPaid" xml:space="preserve">
    <value>Marking payment with ID: {0} as paid</value>
  </data>
  <data name="Payment.MarkAsOverdue" xml:space="preserve">
    <value>Marking payment with ID: {0} as overdue</value>
  </data>
  <data name="Payment.Cancel" xml:space="preserve">
    <value>Cancelling payment with ID: {0}</value>
  </data>
  <data name="Income.GetAll" xml:space="preserve">
    <value>Getting all incomes for user</value>
  </data>
  <data name="Income.Get" xml:space="preserve">
    <value>Getting income with ID: {0}</value>
  </data>
  <data name="Income.Create" xml:space="preserve">
    <value>Creating new income</value>
  </data>
  <data name="Income.Update" xml:space="preserve">
    <value>Updating income with ID: {0}</value>
  </data>
  <data name="Income.Delete" xml:space="preserve">
    <value>Deleting income with ID: {0}</value>
  </data>
  <data name="Income.NotFound" xml:space="preserve">
    <value>Income with ID {0} not found</value>
  </data>
  <data name="Income.Unauthorized" xml:space="preserve">
    <value>User attempted to access income that doesn't belong to them. IncomeId: {0}</value>
  </data>
  <data name="Income.GetByMonth" xml:space="preserve">
    <value>Getting incomes for {0}/{1}</value>
  </data>
  <data name="Income.InvalidMonth" xml:space="preserve">
    <value>Month must be between 1 and 12</value>
  </data>
  <data name="Income.CannotDeleteReceived" xml:space="preserve">
    <value>Cannot delete a received income</value>
  </data>
  <data name="Income.MarkAsReceived" xml:space="preserve">
    <value>Marking income with ID: {0} as received</value>
  </data>
  <data name="Income.Cancel" xml:space="preserve">
    <value>Cancelling income with ID: {0}</value>
  </data>
  <data name="PaymentType.GetAll" xml:space="preserve">
    <value>Getting all payment types for user</value>
  </data>
  <data name="PaymentType.Get" xml:space="preserve">
    <value>Getting payment type with ID: {0}</value>
  </data>
  <data name="PaymentType.Create" xml:space="preserve">
    <value>Creating new payment type</value>
  </data>
  <data name="PaymentType.Update" xml:space="preserve">
    <value>Updating payment type with ID: {0}</value>
  </data>
  <data name="PaymentType.Delete" xml:space="preserve">
    <value>Deleting payment type with ID: {0}</value>
  </data>
  <data name="PaymentType.NotFound" xml:space="preserve">
    <value>Payment type with ID {0} not found</value>
  </data>
  <data name="PaymentType.Unauthorized" xml:space="preserve">
    <value>User attempted to access payment type that doesn't belong to them</value>
  </data>
  <data name="PaymentType.SystemUpdate" xml:space="preserve">
    <value>User attempted to update a system payment type. TypeId: {0}</value>
  </data>
  <data name="PaymentType.CannotUpdateSystem" xml:space="preserve">
    <value>Cannot update system payment type</value>
  </data>
  <data name="PaymentType.CannotDeleteSystem" xml:space="preserve">
    <value>Cannot delete system payment type</value>
  </data>
  <data name="IncomeType.GetAll" xml:space="preserve">
    <value>Getting all income types for user</value>
  </data>
  <data name="IncomeType.Get" xml:space="preserve">
    <value>Getting income type with ID: {0}</value>
  </data>
  <data name="IncomeType.Create" xml:space="preserve">
    <value>Creating new income type</value>
  </data>
  <data name="IncomeType.Update" xml:space="preserve">
    <value>Updating income type with ID: {0}</value>
  </data>
  <data name="IncomeType.Delete" xml:space="preserve">
    <value>Deleting income type with ID: {0}</value>
  </data>
  <data name="IncomeType.NotFound" xml:space="preserve">
    <value>Income type with ID {0} not found</value>
  </data>
  <data name="IncomeType.Unauthorized" xml:space="preserve">
    <value>User attempted to access income type that doesn't belong to them</value>
  </data>
  <data name="IncomeType.SystemUpdate" xml:space="preserve">
    <value>User attempted to update a system income type. TypeId: {0}</value>
  </data>
  <data name="IncomeType.CannotUpdateSystem" xml:space="preserve">
    <value>Cannot update system income type</value>
  </data>
  <data name="IncomeType.CannotDeleteSystem" xml:space="preserve">
    <value>Cannot delete system income type</value>
  </data>
  <data name="PaymentMethod.GetAll" xml:space="preserve">
    <value>Getting all payment methods for user</value>
  </data>
  <data name="PaymentMethod.Get" xml:space="preserve">
    <value>Getting payment method with ID: {0}</value>
  </data>
  <data name="PaymentMethod.Create" xml:space="preserve">
    <value>Creating new payment method</value>
  </data>
  <data name="PaymentMethod.Update" xml:space="preserve">
    <value>Updating payment method with ID: {0}</value>
  </data>
  <data name="PaymentMethod.Delete" xml:space="preserve">
    <value>Deleting payment method with ID: {0}</value>
  </data>
  <data name="PaymentMethod.NotFound" xml:space="preserve">
    <value>Payment method with ID {0} not found</value>
  </data>
  <data name="PaymentMethod.Unauthorized" xml:space="preserve">
    <value>User attempted to access payment method that doesn't belong to them</value>
  </data>
  <data name="PaymentMethod.SystemUpdate" xml:space="preserve">
    <value>User attempted to update a system payment method. MethodId: {0}</value>
  </data>
  <data name="PaymentMethod.CannotUpdateSystem" xml:space="preserve">
    <value>Cannot update system payment method</value>
  </data>
  <data name="PaymentMethod.CannotDeleteSystem" xml:space="preserve">
    <value>Cannot delete system payment method</value>
  </data>
  <data name="CreditCard.GetAll" xml:space="preserve">
    <value>Getting all credit cards for user</value>
  </data>
  <data name="CreditCard.Get" xml:space="preserve">
    <value>Getting credit card with ID: {0}</value>
  </data>
  <data name="CreditCard.Create" xml:space="preserve">
    <value>Creating new credit card</value>
  </data>
  <data name="CreditCard.Update" xml:space="preserve">
    <value>Updating credit card with ID: {0}</value>
  </data>
  <data name="CreditCard.Delete" xml:space="preserve">
    <value>Deleting credit card with ID: {0}</value>
  </data>
  <data name="CreditCard.NotFound" xml:space="preserve">
    <value>Credit card with ID {0} not found</value>
  </data>
  <data name="CreditCard.Unauthorized" xml:space="preserve">
    <value>User attempted to access credit card that doesn't belong to them</value>
  </data>
  <data name="CreditCard.InsufficientLimit" xml:space="preserve">
    <value>Insufficient credit card limit</value>
  </data>
  <data name="PaymentInstallment.GetAll" xml:space="preserve">
    <value>Getting all installments for payment ID: {0}</value>
  </data>
  <data name="PaymentInstallment.Get" xml:space="preserve">
    <value>Getting installment with ID: {0}</value>
  </data>
  <data name="PaymentInstallment.NotFound" xml:space="preserve">
    <value>Payment installment with ID {0} not found</value>
  </data>
  <data name="PaymentInstallment.Unauthorized" xml:space="preserve">
    <value>User attempted to access payment installment that doesn't belong to them</value>
  </data>
  <data name="PaymentInstallment.MarkAsPaid" xml:space="preserve">
    <value>Marking installment with ID: {0} as paid</value>
  </data>
  <data name="PaymentInstallment.MarkAsOverdue" xml:space="preserve">
    <value>Marking installment with ID: {0} as overdue</value>
  </data>
  <data name="PaymentInstallment.Cancel" xml:space="preserve">
    <value>Cancelling installment with ID: {0}</value>
  </data>
  <data name="IncomeInstallment.GetAll" xml:space="preserve">
    <value>Getting all installments for income ID: {0}</value>
  </data>
  <data name="IncomeInstallment.Get" xml:space="preserve">
    <value>Getting installment with ID: {0}</value>
  </data>
  <data name="IncomeInstallment.NotFound" xml:space="preserve">
    <value>Income installment with ID {0} not found</value>
  </data>
  <data name="IncomeInstallment.Unauthorized" xml:space="preserve">
    <value>User attempted to access income installment that doesn't belong to them</value>
  </data>
  <data name="IncomeInstallment.MarkAsReceived" xml:space="preserve">
    <value>Marking installment with ID: {0} as received</value>
  </data>
  <data name="IncomeInstallment.Cancel" xml:space="preserve">
    <value>Cancelling installment with ID: {0}</value>
  </data>
  <data name="Role.GetAll" xml:space="preserve">
    <value>Getting all roles</value>
  </data>
  <data name="Role.Get" xml:space="preserve">
    <value>Getting role with ID: {0}</value>
  </data>
  <data name="Role.Create" xml:space="preserve">
    <value>Creating new role: {0}</value>
  </data>
  <data name="Role.Update" xml:space="preserve">
    <value>Updating role with ID: {0}</value>
  </data>
  <data name="Role.Delete" xml:space="preserve">
    <value>Deleting role with ID: {0}</value>
  </data>
  <data name="Role.NotFound" xml:space="preserve">
    <value>Role with ID {0} not found</value>
  </data>
  <data name="Role.CannotDeleteAssigned" xml:space="preserve">
    <value>Cannot delete role because it is assigned to users</value>
  </data>
  <data name="Permission.GetAll" xml:space="preserve">
    <value>Getting all permissions</value>
  </data>
  <data name="Permission.Get" xml:space="preserve">
    <value>Getting permission with ID: {0}</value>
  </data>
  <data name="Permission.Create" xml:space="preserve">
    <value>Creating new permission: {0}</value>
  </data>
  <data name="Permission.Update" xml:space="preserve">
    <value>Updating permission with ID: {0}</value>
  </data>
  <data name="Permission.Delete" xml:space="preserve">
    <value>Deleting permission with ID: {0}</value>
  </data>
  <data name="Permission.NotFound" xml:space="preserve">
    <value>Permission with ID {0} not found</value>
  </data>
  <data name="Permission.GetForRole" xml:space="preserve">
    <value>Getting permissions for role ID: {0}</value>
  </data>
  <data name="Permission.GetForUser" xml:space="preserve">
    <value>Getting permissions for user ID: {0}</value>
  </data>
  <data name="Auth.InvalidCredentials" xml:space="preserve">
    <value>Invalid username or password</value>
  </data>
  <data name="Auth.UserDeactivated" xml:space="preserve">
    <value>User account is deactivated</value>
  </data>
</root>